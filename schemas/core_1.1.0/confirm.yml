openapi: 3.0.0
info:
  title: Beckn Protocol Core
  description: Beckn Core Transaction API specification
  version: 1.1.0
security:
  - SubscriberAuth: []
paths:
  /confirm:
    post:
      tags:
        - Beckn Provider Platform (BPP)
      description: Initialize an order by providing billing and/or shipping details
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                context:
                  allOf:
                    - $ref: '#/components/schemas/Context'
                    - properties:
                        action:
                          enum:
                            - confirm
                      required:
                        - action
                message:
                  type: object
                  properties:
                    order:
                      $ref: '#/components/schemas/Order'
                  required:
                    - order
              required:
                - context
                - message
components:
  schemas:
    Context:
      required:
        - action
        - version
        - bap_id
        - bap_uri
        - domain
        - message_id
        - transaction_id
        - bpp_id
        - bpp_uri
      description: 'Every API call in beckn protocol has a context. It provides a high-level overview to the receiver about the nature of the intended transaction. Typically, it is the BAP that sets the transaction context based on the consumer''s location and action on their UI. But sometimes, during unsolicited callbacks, the BPP also sets the transaction context but it is usually the same as the context of a previous full-cycle, request-callback interaction between the BAP and the BPP. The context object contains four types of fields. <ol><li>Demographic information about the transaction using fields like `domain`, `country`, and `region`.</li><li>Addressing details like the sending and receiving platform''s ID and API URL.</li><li>Interoperability information like the protocol version that implemented by the sender and,</li><li>Transaction details like the method being called at the receiver''s endpoint, the transaction_id that represents an end-to-end user session at the BAP, a message ID to pair requests with callbacks, a timestamp to capture sending times, a ttl to specifiy the validity of the request, and a key to encrypt information if necessary.</li></ol> This object must be passed in every interaction between a BAP and a BPP. In HTTP/S implementations, it is not necessary to send the context during the synchronous response. However, in asynchronous protocols, the context must be sent during all interactions,'
      type: object
      properties:
        domain:
          description: Domain code that is relevant to this transaction context
        location:
          description: The location where the transaction is intended to be fulfilled.
        action:
          description: The Beckn protocol method being called by the sender and executed at the receiver.
          type: string
        version:
          type: string
          description: Version of transaction protocol being used by the sender.
        bap_id:
          description: Subscriber ID of the BAP
          allOf:
            - description: 'A globally unique identifier of the platform, Typically it is the fully qualified domain name (FQDN) of the platform.'
              type: string
        bap_uri:
          description: Subscriber URL of the BAP for accepting callbacks from BPPs.
          allOf:
            - description: The callback URL of the Subscriber. This should necessarily contain the same domain name as set in `subscriber_id``.
              type: string
              format: uri
        bpp_id:
          description: Subscriber ID of the BPP
          allOf:
            - $ref: '#/components/schemas/Context/properties/bap_id/allOf/0'
        bpp_uri:
          description: Subscriber URL of the BPP for accepting calls from BAPs.
          allOf:
            - $ref: '#/components/schemas/Context/properties/bap_uri/allOf/0'
        transaction_id:
          description: 'This is a unique value which persists across all API calls from `search` through `confirm`. This is done to indicate an active user session across multiple requests. The BPPs can use this value to push personalized recommendations, and dynamic offerings related to an ongoing transaction despite being unaware of the user active on the BAP.'
          type: string
          format: uuid
        message_id:
          description: 'This is a unique value which persists during a request / callback cycle. Since beckn protocol APIs are asynchronous, BAPs need a common value to match an incoming callback from a BPP to an earlier call. This value can also be used to ignore duplicate messages coming from the BPP. It is recommended to generate a fresh message_id for every new interaction. When sending unsolicited callbacks, BPPs must generate a new message_id.'
          type: string
          format: uuid
        timestamp:
          description: Time of request generation in RFC3339 format
          type: string
          format: date-time
        key:
          description: The encryption public key of the sender
          type: string
        ttl:
          description: The duration in ISO8601 format after timestamp for which this message holds valid
          type: string    
    Order:
      description: Describes a legal purchase order. It contains the complete details of the legal contract created between the buyer and the seller.
      type: object
      required:
        - items
        - billing
        - fulfillments
      properties:
        items:
          description: The items purchased / availed in this order. This should be based on what was used in the `select` call.
          type: array
          items:
            $ref: '#/components/schemas/Item'
        billing:
          description: The billing details of this order
          allOf:
            - $ref: '#/components/schemas/Billing'
        fulfillments:
          description: The fulfillments involved in completing this order.
          type: array
          items:
            $ref: '#/components/schemas/Fulfillment'
    Descriptor:
      description: Physical description of something.
      type: object
      properties:
        name:
          type: string
        code:
          type: string
    FulfillmentState:
      description: Describes the state of fulfillment
      type: object
      properties:
        descriptor:
          $ref: '#/components/schemas/Descriptor'
        updated_at:
          type: string
          format: date-time
        updated_by:
          type: string
          description: ID of entity which changed the state
    Fulfillment:
      description: Describes how a an order will be rendered/fulfilled to the end-customer.
      type: object
      required:
        - id
        - customer
      properties:
        id:
          description: Unique reference ID to the fulfillment of an order
          type: string
        type:
          description: 'A code that describes the mode of fulfillment. This is typically set when there are multiple ways an order can be fulfilled. For example, a retail order can be fulfilled either via store pickup or a home delivery. Similarly, a medical consultation can be provided either in-person or via tele-consultation. The network policy must publish standard fulfillment type codes for the different modes of fulfillment.'
          type: string
        rateable:
          description: Whether the fulfillment can be rated or not
          type: boolean
        state:
          description: The current state of fulfillment. The BPP must set this value whenever the state of the order fulfillment changes and fire an unsolicited `on_status` call.
          allOf:
            - $ref: '#/components/schemas/FulfillmentState'
        tracking:
          type: boolean
          description: Indicates whether the fulfillment allows tracking
          default: false
        customer:
          description: The person that will ultimately receive the order
          allOf:
            - $ref: '#/components/schemas/Customer'
        path:
          description: The physical path taken by the agent that can be rendered on a map. The allowed format of this property can be set by the network.
          type: string
    Person:
      description: Describes a person as any individual
      type: object
      properties:
        name:
          description: the name of the person
          type: string        
    Customer:
      description: Describes a customer buying/availing a product or a service. These should be picker up from the customer profile.
      type: object
      required:
        - person
        - contact
      properties:
        person:
          $ref: '#/components/schemas/Person'
        contact:
          $ref: '#/components/schemas/Contact'
    Contact:
      description: Describes the contact information of an entity
      type: object
      properties:
        phone:
          type: string
        email:
          type: string
    Billing:
      description: 'Describes the billing details of an entity.<br>This has properties like name,organization,address,email,phone,time,tax_number, created_at,updated_at'
      type: object
      properties:
        name:
          description: Name of the billable entity
          type: string
        email:
          description: Email address where the bill is sent to
          type: string
          format: email
        phone:
          description: Phone number of the billable entity
          type: string
    ItemQuantity:
      description: Describes the count or amount of an item
      type: object
      properties:
        selected:
          description: This represents the quantity selected for purchase of the item
          type: object
          properties:
            count:
              type: integer
              minimum: 0
    Item:
      description: 'Describes a product or a service offered to the end consumer by the provider. In the mobility sector, it can represent a fare product like one way journey. In the logistics sector, it can represent the delivery service offering. In the retail domain it can represent a product like a grocery item.'
      type: object
      properties:
        id:
          description: ID of the item.
          type: string
        quantity:
          description: The selling quantity of the item
          allOf:
            - $ref: '#/components/schemas/ItemQuantity'